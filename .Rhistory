args(read_csv)
a<-read_xlsx("sample.csv", locale = "utf8",)
args(read_xlsx)
a<-read_xlsx("Book1.xlsx", locale = "utf8",)
a<-read_xlsx("Book1.xlsx", locale = "utf8")
a<-read_xlsx("Book1.xlsx")
a
#文字前後の半角
Data<-read_csv("sample4_csv.csv")
Data
#文字前後の半角
Data<-read_csv("sample4_csv.csv")
Data
local()
local()
default_locale()
R.Version()
knitr::opts_chunk$set(echo = TRUE)
R.Version()$version.string
args(read_csv)
#半角をうめこむ
Data<-read_csv("sample3_csv.csv")
Data
#文字前後の半角
Data<-read_csv("sample4_csv.csv")
Data
a<-read_xlsx("Book1.xlsx")
a
a$numer
a$numer[1]
a<-read_xlsx("Book1.xlsx")
a
#文字前後の半角
Data<-read_csv("sample4_csv.csv")
Data
Data<-read_csv("sample4_csv.csv",trim_ws = F)
Data
Data<-read_csv("space_trim.csv",trim_ws = F)
Data
Data
library(knitr)
library(rmarkdown)
options(max.print="90")
opts_chunk$set(fig.height=5,
fig.width=10)
Data<-read_csv("space_trim.csv")
Data
Data
Data<-read_csv("space_trim.csv",trim_ws = F)
Data
Data<-read_xlsx("space_trim.xlsx")
Data
Data<-read_xlsx("space_trim.xlsx",trim_ws = F)
Data
#半角をうめこむ
Data<-read_csv("sample3_csv.csv")
Data
a<-read_csv("sample3_csv.csv",na=c("", "NA","　"))
a
a
a<-read_csv("sample3_csv.csv",na=c("", "NA","　",1))
a<-read_csv("sample3_csv.csv",na=c("", "NA","　","1"))
a
a<-read_csv("sample3_csv.csv",na=c("", "NA","　","1"))
a
a<-read_csv("sample3_csv.csv",na=c("", "NA","　",1))
a
a<-read_csv("sample3_csv.csv",na=c("NA","　",1))
a
a<-read_csv("sample3_csv.csv",na=c("", "NA"," ",1))
a
a<-read_csv("sample3_csv.csv",na=c("", "NA"," "))
a
Data<-read_xlsx("space3.xlsx")
Data
Data<-read_csv("space3.xlsx")
Data
Df<-read_csv("sample_data.csv")
Df<-Df[,-1]
library(readr)  #csvファイルの読み込み
library(readxl) #xlsxファイルの読み込み
Df<-read_csv("sample_data.csv")
Df<-Df[,-1]
Df
R.Version()$version.string
Data<-read_csv("space_trim.csv",trim_ws = F)
Data
Data<-read_csv("space_trim.csv",trim_ws = F)
Data
Data<-read_csv("space_trim.csv")
Data
Data<-read_csv("space_trim.csv",trim_ws = F)
Data
Data<-read_xlsx("space_trim.xlsx")
Data
Data<-read_xlsx("space_trim.xlsx",trim_ws = F)
Data
Data<-read_csv("sample3_csv.csv")
Data
Data<-read_csv("sample3_csv.csv")
Data
Data<-read_xlsx("sample3_excel.xlsx")
Data
# A tibble: 3 x 3
スペースの数 半角スペース 全角スペース
<dbl> <lgl>        <chr>
1            1 NA           　
2            2 NA           　　
3            3 NA
# A tibble: 3 x 3
スペースの数 半角スペース 全角スペース
<dbl> <lgl>        <chr>
1            1 NA           　
2            2 NA           　　
3            3 NA
# A tibble: 3 x 3
スペースの数 半角スペース 全角スペース
<dbl> <lgl>        <chr>
1            1 NA           　
2            2 NA           　　
3            3 NA
library(knitr)
library(rmarkdown)
options(max.print="90")
opts_chunk$set(fig.height=5,
fig.width=10)
Data<-read_xlsx("sample3_excel.xlsx")
Data
Data<-read_xlsx("sample3_excel.xlsx")
Data
is.null(c(1,2,NULL))
is.null(c(1,2,NULL))
a<-c(1,2,NULL)
a
a<-c(1,NULL,2)
a
a<-c(1,1/0,2)
a
is.null(NULL)
is.null(c(NA,NULL))
c(NA,NULL)
data.frame(a=c(NULL,1,1))
Df<-read_csv("sample_data.csv")
Df<-Df[,-1]
args(read_csv)
summary(Df)
head(Df)
Df<-data.frame(matrix(NA,
100,3,dimnames = list(c(),c("ID","CATALOG_ID",
"NUMBER"))))
alphabet<-"abcdefghijklmnopqrstuvwxyz"
alphabet<-toupper(alphabet)
set.seed(2020)
idx<-as.integer(runif(100,1,26))
for(i in 1:100)Df$ID[i]<-substr(alphabet,idx[i],idx[i])
id_num<-as.integer(runif(100,100,999))
Df$ID<-sort(paste0(Df$ID,id_num))
Df$CATALOG_ID<-""
for(i in 1:3){
idx<-as.integer(runif(100,1,26))
for(j in 1:100)Df$CATALOG_ID[j]<-paste0(Df$CATALOG_ID[j],substr(alphabet,idx[j],idx[j]))
}
Df$CATALOG_ID
Df$NUMBER<-as.integer(runif(100,100,999))
#insert error
#ID
Df$ID[5]<-111
Df$ID[46]<-paste0(substr(Df$ID[46],4,4),substr(Df$ID[46],1,3))
Df$ID[89]<-" "
Df$ID[92]<-"　"
#CATALOG_ID
Df$CATALOG_ID[5]<-Df$CATALOG_ID[58]
Df$CATALOG_ID[89]<-paste0(Df$CATALOG_ID[89]," ")
#INT
Df$NUMBER[12]<-"a12"
write.csv(Df,"sample_data.csv")
write.csv(Df,"sample_data.csv")
Df<-read_csv("sample_data.csv")
Df<-Df[,-1]
args(read_csv)
summary(Df)
min_val<-function(x)min(x,na.rm = T)
max_val<-function(x)max(x,na.rm = T)
max_len<-function(x)max(nchar(x),na.rm = T)
min_len<-function(x)min(nchar(x),na.rm = T)
num_na<-function(x)sum(is.na(x))
res_validation<-
data.frame(matrix(NA,ncol(Df),6,
dimnames = list(colnames(Df),
c("val_min","val_max","len_min","len_max",
"unique_num","na_num"))))
res_validation$val_min<-apply(Df,2,min_val)
res_validation$val_max<-apply(Df,2,max_val)
res_validation$len_min<-apply(Df,2,min_len)
res_validation$len_max<-apply(Df,2,max_len)
res_validation$unique_num<-apply(Df,2,function(x)length(unique(x)))
res_validation$na_num<-apply(Df,2,num_na)
res_validation
default_locale()
Df<-read_csv("sample_data.csv",locale = default_locale())
Df<-Df[,-1]
args(read_csv)
summary(Df)
Df %>% count()
min_val<-function(x)min(x,na.rm = T)
max_val<-function(x)max(x,na.rm = T)
max_len<-function(x)max(nchar(x),na.rm = T)
min_len<-function(x)min(nchar(x),na.rm = T)
num_na<-function(x)sum(is.na(x))
res_validation<-
data.frame(matrix(NA,ncol(Df),6,
dimnames = list(colnames(Df),
c("val_min","val_max","len_min","len_max",
"unique_num","na_num"))))
res_validation$val_min<-apply(Df,2,min_val)
res_validation$val_max<-apply(Df,2,max_val)
res_validation$len_min<-apply(Df,2,min_len)
nchar("　")
nchar("亜案")
nchar("亜案　")
res_validation$val_min<-apply(Df,2,min_val)
res_validation$val_max<-apply(Df,2,max_val)
res_validation$len_min<-apply(Df,2,min_len)
res_validation$len_max<-apply(Df,2,max_len)
Df$ID[92]
parse_character(Df$ID)
parse_character(Df$ID[92])
parse_character(Df$ID[92],locale = locale(encoding = "Shift-JIS"))
?parse_character
Sys.localeconv()
Sys.getlocale()
parse_character(Df$ID[92],locale = locale(encoding = "Japanese_Japan.932"))
parse_character(Df$ID[92],locale = locale(encoding = "CP932"))
Df<-data.frame(matrix(NA,
100,3,dimnames = list(c(),c("ID","CATALOG_ID",
"NUMBER"))))
alphabet<-"abcdefghijklmnopqrstuvwxyz"
alphabet<-toupper(alphabet)
set.seed(2020)
idx<-as.integer(runif(100,1,26))
for(i in 1:100)Df$ID[i]<-substr(alphabet,idx[i],idx[i])
id_num<-as.integer(runif(100,100,999))
Df$ID<-sort(paste0(Df$ID,id_num))
Df$CATALOG_ID<-""
for(i in 1:3){
idx<-as.integer(runif(100,1,26))
for(j in 1:100)Df$CATALOG_ID[j]<-paste0(Df$CATALOG_ID[j],substr(alphabet,idx[j],idx[j]))
}
Df$CATALOG_ID
Df$NUMBER<-as.integer(runif(100,100,999))
#insert error
#ID
Df$ID[5]<-111
Df$ID[25]<-"亜345"
Df$ID[46]<-paste0(substr(Df$ID[46],4,4),substr(Df$ID[46],1,3))
Df$ID[89]<-" "
Df$ID[92]<-"　"
#CATALOG_ID
Df$CATALOG_ID[5]<-Df$CATALOG_ID[58]
Df$CATALOG_ID[89]<-paste0(Df$CATALOG_ID[89]," ")
#INT
Df$NUMBER[12]<-"a12"
write.csv(Df,"sample_data.csv")
Df<-read_csv("sample_data.csv",locale = default_locale())
Df<-Df[,-1]
args(read_csv)
res_validation<-
data.frame(matrix(NA,ncol(Df),6,
dimnames = list(colnames(Df),
c("val_min","val_max","len_min","len_max",
"unique_num","na_num"))))
res_validation$val_min<-apply(Df,2,min_val)
res_validation$val_max<-apply(Df,2,max_val)
res_validation$len_min<-apply(Df,2,min_len)
res_validation$len_max<-apply(Df,2,max_len)
res_validation$unique_num<-apply(Df,2,function(x)length(unique(x)))
res_validation$na_num<-apply(Df,2,num_na)
res_validation
Df<-read_csv("sample_data.csv",locale = locale(encoding = "CP932"))
#Df<-read_csv("sample_data.csv",locale = locale(encoding = "CP932"))
Df<-Df[,-1]
#data count
Df %>% count()
min_val<-function(x)min(x,na.rm = T)
max_val<-function(x)max(x,na.rm = T)
max_len<-function(x)max(nchar(x),na.rm = T)
min_len<-function(x)min(nchar(x),na.rm = T)
res_validation<-
data.frame(matrix(NA,ncol(Df),6,
dimnames = list(colnames(Df),
c("val_min","val_max","len_min","len_max",
"unique_num","na_num"))))
res_validation$val_min<-apply(Df,2,min_val)
res_validation$val_max<-apply(Df,2,max_val)
res_validation$len_min<-apply(Df,2,min_len)
res_validation$len_max<-apply(Df,2,max_len)
res_validation$unique_num<-apply(Df,2,function(x)length(unique(x)))
res_validation$na_num<-apply(Df,2,function(x)sum(is.na(x)))
res_validation
Df<-read_csv("sample_data.csv")
min_val<-function(x)min(x,na.rm = T)
max_val<-function(x)max(x,na.rm = T)
max_len<-function(x)max(nchar(x),na.rm = T)
min_len<-function(x)min(nchar(x),na.rm = T)
res_validation<-
data.frame(matrix(NA,ncol(Df),6,
dimnames = list(colnames(Df),
c("val_min","val_max","len_min","len_max",
"unique_num","na_num"))))
res_validation$val_min<-apply(Df,2,min_val)
res_validation$val_max<-apply(Df,2,max_val)
res_validation$len_min<-apply(Df,2,min_len)
Df[25,]
Df
#Df<-read_csv("sample_data.csv",locale = locale(encoding = "CP932"))
Df<-Df[,-1]
Df
Df[25,]
Data<-read_xlsx("sample3_excel.xlsx")
Data
Data$全角スペース
nchar(Data$全角スペース)
c("a","　a")
nchar(c("a","　a"))
?write.csv
#NUMBRER
write.csv(Df,"sample_data.csv",fileEncoding = "UTF-8")
#NUMBRER
#write.csv(Df,"sample_data.csv",fileEncoding = "UTF-8")
write.csv(Df,"sample_data.csv")
# encode
Df<-read_csv("sample_data.csv",locale = locale(encoding = "CP932"))
Df<-Df[,-1]
Df
Df[25,]
# encode
Df<-read_csv("sample_data.csv",locale = locale(encoding = "CP932"))
Df<-Df[,-1]
Df[25,]
# encode
Df<-read_csv("sample_data.csv",locale = locale(encoding = "Shift-JIS"))
Df<-Df[,-1]
Df[25,]
Df
Df[25,]
#data for validation check
Df<-data.frame(matrix(NA,
100,3,dimnames = list(c(),c("ID","CATALOG_ID",
"NUMBER"))))
alphabet<-"abcdefghijklmnopqrstuvwxyz"
alphabet<-toupper(alphabet)
set.seed(2020)
idx<-as.integer(runif(100,1,26))
for(i in 1:100)Df$ID[i]<-substr(alphabet,idx[i],idx[i])
id_num<-as.integer(runif(100,100,999))
Df$ID<-sort(paste0(Df$ID,id_num))
Df$CATALOG_ID<-""
for(i in 1:3){
idx<-as.integer(runif(100,1,26))
for(j in 1:100)Df$CATALOG_ID[j]<-paste0(Df$CATALOG_ID[j],substr(alphabet,idx[j],idx[j]))
}
Df$CATALOG_ID
Df$NUMBER<-as.integer(runif(100,100,999))
#insert error
#ID
Df$ID[5]<-111
Df$ID[25]<-"亜345"
Df$ID[46]<-paste0(substr(Df$ID[46],4,4),substr(Df$ID[46],1,3))
Df$ID[89]<-" "
Df$ID[92]<-"　"
#CATALOG_ID
Df$CATALOG_ID[5]<-Df$CATALOG_ID[58]
Df$CATALOG_ID[89]<-paste0(Df$CATALOG_ID[89]," ")
#INT
Df$NUMBER[12]<-"a12"
Df[25,]
write.csv(Df,"sample_data.csv")
Df<-read_csv("sample_data.csv"
)
Df[25,]
# encode
Df<-read_csv("sample_data.csv",locale = locale(encoding = "CP932"))
Df<-Df[,-1]
Df[25,]
Df<-read_csv("sample_data.csv",locale = locale(encoding = "Shift-JIS"))
Df<-Df[,-1]
Df[25,]
res_validation<-
data.frame(matrix(NA,ncol(Df),6,
dimnames = list(colnames(Df),
c("val_min","val_max","len_min","len_max",
"unique_num","na_num"))))
res_validation$val_min<-apply(Df,2,min_val)
res_validation$val_max<-apply(Df,2,max_val)
res_validation$len_min<-apply(Df,2,min_len)
res_validation$len_max<-apply(Df,2,max_len)
res_validation$unique_num<-apply(Df,2,function(x)length(unique(x)))
res_validation$na_num<-apply(Df,2,function(x)sum(is.na(x)))
#結果の確認
res_validation
a<-data.frame(a=c("a","　a"))
write.csv(a,"tmp.csv")
a<-read.csv("a.csv")
a<-read.csv("tmp.csv")
a
a$a
nchar(a$a)
a<-data.frame(a=c("a","　a","ac"))
write.csv(a,"tmp.csv")
a<-read.csv("tmp.csv")
a
a<-read_csv("tmp.csv")
a
nchar(a$a)
#NUMBRER
write.csv(Df,"sample_data.csv",fileEncoding = "S-JIS")
Df<-data.frame(matrix(NA,
100,3,dimnames = list(c(),c("ID","CATALOG_ID",
"NUMBER"))))
alphabet<-"abcdefghijklmnopqrstuvwxyz"
alphabet<-toupper(alphabet)
set.seed(2020)
idx<-as.integer(runif(100,1,26))
for(i in 1:100)Df$ID[i]<-substr(alphabet,idx[i],idx[i])
id_num<-as.integer(runif(100,100,999))
Df$ID<-sort(paste0(Df$ID,id_num))
Df$CATALOG_ID<-""
for(i in 1:3){
idx<-as.integer(runif(100,1,26))
for(j in 1:100)Df$CATALOG_ID[j]<-paste0(Df$CATALOG_ID[j],substr(alphabet,idx[j],idx[j]))
}
Df$CATALOG_ID
Df$NUMBER<-as.integer(runif(100,100,999))
#insert error
#ID
Df$ID[5]<-111
Df$ID[25]<-"亜345"
Df$ID[46]<-paste0(substr(Df$ID[46],4,4),substr(Df$ID[46],1,3))
Df$ID[89]<-" "
Df$ID[92]<-"　"
#CATALOG_ID
Df$CATALOG_ID[5]<-Df$CATALOG_ID[58]
Df$CATALOG_ID[89]<-paste0(Df$CATALOG_ID[89]," ")
#INT
Df$NUMBER[12]<-"a12"
#NUMBRER
write.csv(Df,"sample_data.csv",fileEncoding = "Shift-JIS")
# encode
#Df<-read_csv("sample_data.csv",locale = locale(encoding = "CP932"))
#Df<-read_csv("sample_data.csv",locale = locale(encoding = "Shift-JIS"))
Df<-read_csv("sample_data.csv")
library(tidyverse)
# encode
#Df<-read_csv("sample_data.csv",locale = locale(encoding = "CP932"))
#Df<-read_csv("sample_data.csv",locale = locale(encoding = "Shift-JIS"))
Df<-read_csv("sample_data.csv")
Df<-Df[,-1]
Df[25,]
a<-read_csv("test.csv")
a
a<-read_csv("test.csv",locale =(encoding = "Shift-JIS") )
a
a<-read_csv("test.csv",locale =locale(encoding = "Shift-JIS"))
a
library(knitr)
library(rmarkdown)
options(max.print="90")
opts_chunk$set(fig.height=5,
fig.width=10)
Df<-read_csv("sample_data.csv",locale = default_locale())
Df<-Df[,-1]
args(read_csv)
summary(Df)
Df %>% count()
min_val<-function(x)min(x,na.rm = T)
max_val<-function(x)max(x,na.rm = T)
max_len<-function(x)max(nchar(x),na.rm = T)
min_len<-function(x)min(nchar(x),na.rm = T)
num_unique<-function(x)function(x)length(unique(x))
num_na<-function(x)sum(is.na(x))
validation_check<-function(Df){
res_validation<-
data.frame(matrix(NA,ncol(Df),6,
dimnames = list(c(),
c("val_min","val_max","len_min","len_max",
"unique_num","na_num"))))
res_validation$val_min<-apply(Df,2,min_val)
res_validation$val_max<-apply(Df,2,max_val)
res_validation$len_min<-apply(Df,2,min_len)
res_validation$len_max<-apply(Df,2,max_len)
res_validation$unique_num<-apply(Df,2,num_unique)
res_validation$na_num<-apply(Df,2,num_na)
res_validation
}
#validation_check(Df)
validation_check(Df)
a<-data.frame(a=c("a","　a","ac","愛"))
write.csv(a,"tmp.csv")
a<-read_csv("tmp.csv")
a<-read_csv("tmp.csv")
a
Data<-read_csv("sample1_csv.csv")
Data2<-read_csv("sample4_excel.csv",trim_ws = F)
Data2<-read_xlsx("sample4_excel.xlsx",trim_ws = F)
library(readxl)
Data2<-read_xlsx("sample4_excel.xlsx",trim_ws = F)
Data2$hw_space
Data2<-read_excel("sample4_excel.xlsx")
Data2
Data2<-read_xlsx("sample4_excel.xlsx",trim_ws = F)
Data2$hw_space
Data2
